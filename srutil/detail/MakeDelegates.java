////////////////////////////////////////////////////////////////////////////////
/// @section LICENSE                                                         ///
///           Copyright (c) 2013 Alejandro Morell Garcia                     ///
///                Distributed under the MIT License                         ///
///              (http://opensource.org/licenses/MIT)                        ///
///                                                                          ///
/// @file                                                                    ///
/// @author 2005 Sergey Ryazanov (http://home.onego.ru/~ryazanov)            ///
/// @author 2013 Alejandro Morell Garcia (http://github.com/amorellgarcia)   ///
///                                                                          ///
/// @section DESCRIPTION                                                     ///
/// Port of @a make_delegates.pl to Java.                                    ///
////////////////////////////////////////////////////////////////////////////////

import java.io.IOException;
import java.io.PrintWriter;

public class MakeDelegates {

	private static int MAX_PARAM_COUNT = 10;
	private static final String OUTPUT_FILE = "delegate_list.hpp";

	private static String getArgs(int count, String fstr) {
		StringBuffer buf = new StringBuffer("");

		for (int i = 0; i < count; i++) {
			buf.append(String.format(fstr, i + 1));
		}

		return buf.toString();
	}

	private static String getArgs(int count, String fstr, String separator) {
		StringBuffer buf = new StringBuffer("");

		if (count > 0) {
			buf.append(String.format(fstr, 1));
			for (int i = 1; i < count; i++) {
				buf.append(separator);
				buf.append(String.format(fstr, i + 1));
			}
		}

		return buf.toString();
	}

	public static void main(String[] args) {
		try {
			PrintWriter printer = new PrintWriter(OUTPUT_FILE);

			printer.println("// Automatically generated by "
					+ MakeDelegates.class.getSimpleName() + "\n");

			for (int paramCount = 0; paramCount <= MAX_PARAM_COUNT; ++paramCount) {
				printer.format("// %d params\n", paramCount);
				printer.format("#define SRUTIL_DELEGATE_PARAM_COUNT %d\n",
						paramCount);

				printer.print("#define SRUTIL_DELEGATE_TEMPLATE_PARAMS ");
				printer.println(getArgs(paramCount, "typename A%1$d", ", "));

				printer.print("#define SRUTIL_DELEGATE_TEMPLATE_ARGS ");
				printer.println(getArgs(paramCount, "A%1$d", ", "));

				printer.print("#define SRUTIL_DELEGATE_PARAMS ");
				printer.println(getArgs(paramCount, "A%1$d a%1$d", ", "));

				printer.print("#define SRUTIL_DELEGATE_ARGS ");
				printer.println(getArgs(paramCount, "a%1$d", ", "));

				printer.print("#define SRUTIL_DELEGATE_INVOKER_INITIALIZATION_LIST ");
				printer.println(getArgs(paramCount, "a%1$d(a%1$d)", ","));

				printer.print("#define SRUTIL_DELEGATE_INVOKER_DATA ");
				printer.println(getArgs(paramCount, "A%1$d a%1$d;"));

				printer.println("#include \"delegate_template.hpp\"");
				printer.println("#undef SRUTIL_DELEGATE_PARAM_COUNT");
				printer.println("#undef SRUTIL_DELEGATE_TEMPLATE_PARAMS");
				printer.println("#undef SRUTIL_DELEGATE_TEMPLATE_ARGS");
				printer.println("#undef SRUTIL_DELEGATE_PARAMS");
				printer.println("#undef SRUTIL_DELEGATE_ARGS");
				printer.println("#undef SRUTIL_DELEGATE_INVOKER_INITIALIZATION_LIST");
				printer.println("#undef SRUTIL_DELEGATE_INVOKER_DATA");
				printer.println();
			}

			printer.close();
		} catch (IOException io) {
			io.printStackTrace();
		}
	}

}
